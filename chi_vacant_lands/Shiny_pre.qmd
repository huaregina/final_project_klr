---
title: "Shiny: Vacant Lands in Chicago Research"
author: "Liujun, Katika, Liling"
date: "2024-12-01"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

## Background

## Data

\newpage

```{python}
#| echo: false
import os
import pandas as pd
import altair as alt
import unittest
import geopandas as gpd
from shapely import wkt
from shapely.geometry import Point
import numpy as np
import json
from scipy.stats.mstats import winsorize
from shiny import App, render, ui

import warnings 
warnings.filterwarnings('ignore')
alt.renderers.enable("png")
alt.data_transformers.disable_max_rows() 
```

```{python}
# Read in the data
df = pd.read_csv('./combined_data.csv')
```

# Display vacant lots by scatter plot

```{python}
scatter = alt.Chart(df).mark_point(size=0.3, filled=True, color='blue').encode(
    longitude='longitude',
    latitude='latitude',
    tooltip=['latitude:Q', 'longitude:Q', 'chicago_community_area_name:N', 'zip_code:N' ]
).project(
    type='identity',
    reflectY=True
).properties(
    title='Vacant Land Locations'
)

scatter
```

# How is vacant lots related with other characteristics of the community?

```{python}
# Read shapefile using GeoPandas
gdf1 = gpd.read_file('ZIP Codes/geo_export.shp')

# Transform data type
gdf1['zip'] = pd.to_numeric(gdf1['zip'], errors='coerce').fillna(0).astype(int)

# Ensure Zip Codes are strings of 5 digits
gdf1['zip'] = gdf1['zip'].astype(str).str.zfill(5)

```

```{python}
# Merge geographic data with the counts
gdf1_counts = gdf1.merge(zip_counts, left_on='zip', right_on='Zip', how='left')

# Fill missing values for counts with 0
gdf1_counts['Vacant_Lots_Count'] = gdf1_counts['Vacant_Lots_Count'].fillna(0)
```

```{python}
# Count vacant lands by zip code
vacant_land_counts = df.groupby('zip_code').size().reset_index(name='vacant_land_count')

# Sort to top 5 zip codes with most vacant lands 
top5_zip_vacant = vacant_land_counts.sort_values(by='vacant_land_count', ascending=False).head() 

# Convert zip_code to string and print
top5_zip_vacant['zip_code'] = top5_zip_vacant['zip_code'].apply(lambda x: str(int(x)))

# Reset index
top5_zip_vacant = top5_zip_vacant.reset_index(drop=True)

print(top5_zip_vacant)

# 1. 60621
# 2. 60636
# 3. 60609
# 4. 60628
# 5. 60624
```

# 1 Crime Rate

```{python}
# Read shapefile using GeoPandas
gdf_crime = gpd.read_file('Crime Data/crime_data.shp')
crime_count_zip = gdf_crime.groupby('zip').size().reset_index(name='crime_count')
```

```{python}
# Merge the crime count data with the population data (2021) using the correct column
df_crime_rate = crime_count_zip.merge(df_pop_2021[['zip','total_population']], on='zip', how='left')
```

```{python}
# Calculate the crime rate per 1,000 people
df_crime_rate['crime_rate'] = df_crime_rate['crime_count'] / df_crime_rate['total_population'] * 1000

# Replace inf with na
df_crime_rate['crime_rate'] = df_crime_rate['crime_rate'].replace([float('inf'), -float('inf')], float('nan'))
```

```{python}
# Merge with zip shapefile
gdf_crime_rate = gdf1.merge(df_crime_rate, on='zip', how='left')

# Fill missing crime rate with 0
gdf_crime_rate['crime_rate'] = gdf_crime_rate['crime_rate'].fillna(0).astype(int)

# Define the Windsorization limits 
lower_limit = 0.01  
upper_limit = 0.96  

# Apply Windsorization
gdf_crime_rate['crime_rate_windsorized'] = winsorize(
    gdf_crime_rate['crime_rate'], 
    limits=(lower_limit, 1 - upper_limit)
)

# Print before and after comparison
print(gdf_crime_rate[['crime_rate', 'crime_rate_windsorized']].describe())

```

```{python}
crime_rate_map = alt.Chart(gdf_crime_rate
).mark_geoshape(
    stroke='black',
    strokeWidth=0.5
).encode(
    color=alt.Color('crime_rate_windsorized:Q', 
                    scale=alt.Scale(range=["transparent", "red"]),  
                    title='Crime rate per 1,000 population'),
    tooltip=['zip:N', 'crime_rate_windsorized:Q']
).project(
    type='albersUsa'  
).properties(
    width=600,
    height=400,
)

crime_rate_map
```

```{python}
# Combine the choropleth map and scatter layers
combined_map_crime = (crime_rate_map + scatter).properties(
    title={
        'text': 'Crime rate by zip code and Vacant Lands',
        'fontSize': 16,
        'anchor': 'middle'
    }
).configure_view(
    stroke=None  # Remove gridlines
)

# Display the combined map
combined_map_crime
```


# 2 Income level

```{python}
# Read shapefile using GeoPandas
gdf_merged = gpd.read_file('Income/income_data.shp')

# Convert the GeoDataFrame to GeoJSON format for Altair
gdf_merged_json = json.loads(gdf_merged.to_crs(epsg=4326).to_json())

# Create a base map layer
base_map = alt.Chart(alt.Data(values=gdf_merged_json['features'])).mark_geoshape(
    fill='white',
    stroke='gray',
    strokeWidth=0.5
).project(
    type='identity',
    reflectY=True 
).properties(
    width=400,
    height=400
)

# Create the choropleth layer for income
choropleth = alt.Chart(alt.Data(values=gdf_merged_json['features'])).mark_geoshape(
    stroke='white',
    strokeWidth=0.5
).encode(
    color=alt.Color('properties.INCOME:Q', scale=alt.Scale(scheme='bluegreen'), title='Per Capita Income')
).project(
    type='identity',
    reflectY=True
)

# Combine the base map and choropleth layers
chro_map = (base_map + choropleth).configure_view(
    stroke=None  # Remove gridlines
)
```

```{python}
# Combine the choropleth map and scatter layers
combined_map_income = (chro_map + scatter).properties(
    title={
        'text': 'Per Capita Income by Community and Vacant Lands',
        'fontSize': 16,
        'anchor': 'middle'
    }
).configure_view(
    stroke=None  # Remove gridlines
)

# Display the combined map
combined_map_income
```


# 3 Unemployment

```{python}
# Create the choropleth layer for unemployment rate
choropleth_unemploy = alt.Chart(alt.Data(values=gdf_merged_json['features'])).mark_geoshape(
    stroke='white',
    strokeWidth=0.5
).encode(
    color=alt.Color('properties.UNEMPLOYME:Q', scale=alt.Scale(scheme='bluegreen'), title='Unemployment Rate')
).project(
    type='identity',
    reflectY=True
)

# Combine the base map and choropleth layers
chro_map_unemploy  = (base_map + choropleth_unemploy ).configure_view(
    stroke=None
)
```

```{python}
# Combine the choropleth map and scatter layers
combined_map_unemploy = (chro_map_unemploy  + scatter).properties(
    title={
        'text': 'Unemployment Rate by Community and Vacant Lands',
        'fontSize': 16,
        'anchor': 'middle'
    }
).configure_view(
    stroke=None  # Remove gridlines
)

# Display the combined map
combined_map_unemploy
```


# 4 Population (Zip Code)

```{python}

# merge population data with Chicago zip code shapefile
gdf_pop = gdf_zip.merge(df_pop_2021, on='zip', how='left')
```
```{python}
population_map = alt.Chart(gdf_pop
).mark_geoshape(
    stroke='lightgray',
    strokeWidth=0.5
).encode(
    color=alt.Color('total_population:Q', 
                    scale=alt.Scale(scheme='bluegreen'),  
                    title='Population by Zip Codes'),
    tooltip=['zip:N', 'total_population:Q']
).project(
    type='identity',
    reflectY=True  
).properties(
    width=600,
    height=400,
)

population_map
```

```{python}
# Combine the choropleth map and scatter layers
combined_map_pop = (population_map + scatter).properties(
    title={
        'text': 'Population by zip code and Vacant Lands',
        'fontSize': 16,
        'anchor': 'middle'
    }
).configure_view(
    stroke=None  # Remove gridlines
)

# Display the combined map
combined_map_pop
```


# 5 Business Density (Zip Code)

```{python}
# Read business license data for 2023
# We will use the count of business licences by each zip code as the indicator of business density 
df_busn = pd.read_csv('./data/business_license_2023.csv')

df_busn = df_busn.groupby('ZIP CODE').size().reset_index(name='Count')

df_busn = df_busn[
    (df_busn['ZIP CODE'].str.startswith('606')) |
    (df_busn['ZIP CODE'] == '60827') |
    (df_busn['ZIP CODE'] == '60707')
]
```

```{python}
# rename the column
df_busn = df_busn.rename(columns={
    'ZIP CODE': 'zip',
    'Count': 'business_density'
})

# merge with zip shapefile
gdf_busn = gdf_zip.merge(df_busn, on='zip', how='left')

# Fill missing column with 0
gdf_busn['business_density'] = gdf_busn['business_density'].fillna(0).astype(int)
```

```{python}
busn_map = alt.Chart(gdf_busn
).mark_geoshape(
  # Default fill for all areas
    stroke='white',
    strokeWidth=0.5
).encode(
    color=alt.Color('business_density:Q', 
                    scale=alt.Scale(range=["transparent", "red"]),  
                    title='Business Denisty'),
    tooltip=['zip:N', 'Business Density:Q']
).project(
    type='identity',
    reflectY=True 
).properties(
    width=600,
    height=400,
)

busn_map
```

```{python}
# Combine the choropleth map and scatter layers
combined_map_busn = (busn_map + scatter).properties(
    title={
        'text': 'Business Density by zip code and Vacant Lands',
        'fontSize': 16,
        'anchor': 'middle'
    }
).configure_view(
    stroke=None  # Remove gridlines
)

# Display the combined map
combined_map_busn
```




